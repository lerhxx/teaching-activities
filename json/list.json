[{
	"url": "../dist/imgs/1.jpg",
	"title": "xxx",
	"abs": "多年来，XMLHttpRequest一直是web开发者的亲密助手。无论是直接的，还是间接的， 当我们谈及Ajax技术的时候，通常意思就是基于XMLHttpRequest的Ajax，它是一种能够有效改进页面通信的技术。 Ajax的兴起是由于Google的Gmail所带动的，随后被广泛的应用到众多的Web产品（应用）中，可以认为， 开发者已经默认将XMLHttpRequest作为了当前Web应用与远程资源进行通信的基础。 而本文将要介绍的内容则是XMLHttpRequest的最新替代技术——Fetch API， 它是W3C的正式标准，本文将会介绍Fetch API的相关知识，以及探讨它所能使用的场景和能解决的问题。"
}, {
	"url": "../dist/imgs/2.jpg",
	"title": "xxx",
	"abs": "Fetch API提供了一个fetch()方法，它被定义在BOM的window对象中，你可以用它来发起对远程资源的请求。 该方法返回的是一个Promise对象，让你能够对请求的返回结果进行检索。"
}, {
	"url": "../dist/imgs/3.jpg",
	"title": "xxx",
	"abs": "为了能够进一步的解释Fetch API，下面我们写一些代码来具体的介绍它的用法： 下面这个例子将会通过Flicker API来检索一些图片，并将结果插入到页面中。到目前为止， Fetch API还未被所有的浏览器支持。因此，如果你想体验这一技术，最好使用最新版本的Chrome浏览器。 为了能够正确的调用Flicker API，你需要申请自己的API KEY，将其插入到代码中的适当位置，即your_api_key那个位置。"
}, {
	"url": "../dist/imgs/4.jpeg",
	"title": "xxx",
	"abs": "来看看第一个任务：我们使用API来从Flicker中检索一些有关”企鹅“的照片，并将它们展示在也没中，代码如下。"
}]